import { spawn } from 'child_process';
import { createWriteStream } from 'fs';
import { join } from 'path';

// Create a test image
const testImagePath = join(process.cwd(), 'test-image.png');
const ws = createWriteStream(testImagePath);

// Create a simple 1x1 red pixel PNG
const redPixel = Buffer.from([
  0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
  0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,
  0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41,
  0x54, 0x08, 0xD7, 0x63, 0xF8, 0xCF, 0xC0, 0x00,
  0x00, 0x03, 0x01, 0x01, 0x00, 0x18, 0xDD, 0x8D,
  0xB4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E,
  0x44, 0xAE, 0x42, 0x60, 0x82
]);

ws.write(redPixel);
ws.end();

// Test the MCP server
const server = spawn('node', ['build/index.js'], {
  stdio: ['pipe', 'pipe', 'inherit']
});

// Send test request
const request = {
  jsonrpc: "2.0",
  method: "tools/call",
  params: {
    name: "upload_image",
    arguments: {
      filepath: testImagePath
    }
  },
  id: 1
};

server.stdin.write(JSON.stringify(request) + '\n');

// Read response
server.stdout.on('data', (data) => {
  console.log('Response:', data.toString());
  server.kill();
});

// Handle server exit
server.on('exit', (code) => {
  console.log('Server exited with code:', code);
});